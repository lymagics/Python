"""AES block cipher
   key: 128 bit
   block: 128 bit
"""

#Constants:
NB = 4 # number of blocks in state
NK = 4 # number of key length
NR = 10 # number of rounds


Sbox = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]


InvSbox = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]


Rcon = [
    [0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
    [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00]
]


#Encode symbol to num
def encode_to_num(text:str):
    num_arr = []
    for letter in text:
        num_arr.append(ord(letter))
    return num_arr


#Encode num to symbol
def encode_to_symbol(num_arr:int):
    text = ''
    for num in num_arr:
        text+=chr(num)
    return text


#Split input msg to 16 bytes block
def split_to_16bytes(num_arr):
    b_16 = []
    blocks_count = len(num_arr)//16

    for i in range(blocks_count):
        temp_block = []
        for k in range(16*i,16*(i+1)):
          temp_block.append(num_arr[k])
        b_16.append(temp_block)
 
    return b_16


#Complite block to 128 bit
def complite_block(num_arr):
    while len(num_arr)%16 != 0:
        num_arr.append(0)
    return num_arr


#Key expansion function
def key_expansion(key):
    num_key = encode_to_num(key)
    while len(num_key)%4*NK != 0:
        num_key.append(0x01)
    
    key_schedule = [[] for i in range(4)]
    for r in range(4):
        for c in range(NK):
            key_schedule[r].append(num_key[r+c*4])
    
    for col in range(NK,NB*(NR+1)):
        if col % NK == 0:
            temp = [key_schedule[row][col-1] for row in range(1,4)]
            temp.append(key_schedule[0][col-1])

            for k in range(len(temp)):
                row = temp[k] // 0x10
                col = temp[k] % 0x10
                sbox_el = Sbox[16*row+col]
                temp[k] = sbox_el

            for row in range(4):
                res = (key_schedule[row][col-4])^(temp[row])^(Rcon[row][int(col/NK)-1])
                key_schedule[row].append(res)
        
        else:
            for row in range(4):
                res = key_schedule[row][col-4]^key_schedule[row][col-1]
                key_schedule[row].append(res)
    
    return key_schedule


#Function of sbox
def sub_bytes(state,inv=False):
    if inv == False:
        box = Sbox
    else:
        box = InvSbox

    for i in range(len(state)):
        for j in range(len(state[i])):
            row = state[i][j] // 0x10
            col = state[i][j] % 0x10
            sbox_el = box[16*row + col]
            state[i][j] = sbox_el

    return state


#Shift rows in state
def shift_rows(state,inv=False):
    count = 1
    if inv == False:
        for i in range(1,NB):
            state[i] = lshift(state[i],count)
            count += 1
    else:
        for i in range(1,NB):
            state[i] = rshift(state[i],count)
            count += 1
    return state


#Shift functions
def lshift(state,count):
    new_list = state[:]
    for i in range(count):
        temp = new_list[1:]
        temp.append(new_list[0])
        new_list[:] = temp[:]

    return new_list


def rshift(state,count):
    new_list = state[:]
    for i in range(count):
        temp = new_list[:-1]
        temp.insert(0, new_list[-1])
        new_list[:] = temp[:]

    return new_list


#gF(2^8) multiplication functions
def m_02(num):
    if num < 0x80:
        res = (num << 1)
    else:
        res = (num << 1) ^ 0x1b
    return res%0x100

def m_03(num):
    return (m_02(num)^num)

def m_09(num):
    return m_02(m_02(m_02(num)))^num

def m_0b(num):
    return m_02(m_02(m_02(num)))^m_02(num)^num

def m_0d(num):
    return m_02(m_02(m_02(num)))^m_02(m_02(num))^num

def m_0e(num):
    return m_02(m_02(m_02(num)))^m_02(m_02(num))^m_02(num)
#End of multiplication functions


#Mix columns function
def mix_columns(state,inv=False):
    for i in range(NB):
        if inv == False:
            s0 = m_02(state[0][i])^m_03(state[1][i])^state[2][i]^state[3][i]
            s1 = state[0][i]^m_02(state[1][i])^m_03(state[2][i])^state[3][i]
            s2 = state[0][i]^state[1][i]^m_02(state[2][i])^m_03(state[3][i])
            s3 = m_03(state[0][i])^state[1][i]^state[2][i]^m_02(state[3][i])
        else:
            s0 = m_0e(state[0][i])^m_0b(state[1][i])^m_0d(state[2][i])^m_09(state[3][i])
            s1 = m_09(state[0][i])^m_0e(state[1][i])^m_0b(state[2][i])^m_0d(state[3][i])
            s2 = m_0d(state[0][i])^m_09(state[1][i])^m_0e(state[2][i])^m_0b(state[3][i])
            s3 = m_0b(state[0][i])^m_0d(state[1][i])^m_09(state[2][i])^m_0e(state[3][i])

        state[0][i] = s0
        state[1][i] = s1
        state[2][i] = s2
        state[3][i] = s3
    return state


#Addition od rounf key
def add_round_key(state,key_schedule,round=0):
    for col in range(NK):
        s0 = state[0][col]^key_schedule[0][NB*round+col]
        s1 = state[1][col]^key_schedule[1][NB*round+col]
        s2 = state[2][col]^key_schedule[2][NB*round+col]
        s3 = state[3][col]^key_schedule[3][NB*round+col]

        state[0][col] = s0
        state[1][col] = s1
        state[2][col] = s2
        state[3][col] = s3
    return state


#Encryption function
def aes_encrypt(arr_128b,key):
    state = [[] for i in range(4)]
    for r in range(4):
        for c in range(NB):
            state[r].append(arr_128b[r+c*4])
    
    key_schedule = key_expansion(key)

    state = add_round_key(state,key_schedule)

    for round in range(1,NR):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state,key_schedule,round)
    
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state,key_schedule,round+1)

    output = [None for i in range(4*NB)]
    for r in range(4):
        for c in range(NB):
            output[r+4*c] = state[r][c]
    
    return output


#Decryption function
def aes_decrypt(arr_128b,key):
    state = [[] for i in range(4)]
    for r in range(4):
        for c in range(NB):
            state[r].append(arr_128b[r+c*4])

    key_schedule = key_expansion(key)

    state = add_round_key(state,key_schedule,NR)

    round = NR - 1
    while round >= 1:
        state = shift_rows(state,inv=True)
        state = sub_bytes(state,inv=True)
        state = add_round_key(state,key_schedule,round)
        state = mix_columns(state,inv=True)

        round -= 1

    state = shift_rows(state,inv=True)
    state = sub_bytes(state,inv=True)
    state = add_round_key(state,key_schedule,round)

    output = [None for i in range(4*NB)]
    for r in range(4):
        for c in range(NB):
            output[r+c*4] = state[r][c]
    
    return output


#Main
def main():
    text = 'Hello World!'
    num_arr = encode_to_num(text)
    num_block = complite_block(num_arr)
    print('Plaintext:',num_block)

    b_16 = split_to_16bytes(num_block)

    key = 'key_for_aes_ciph'
    
    encrypted = []
    for block in b_16:
        encrypted.append(aes_encrypt(block,key))
    print('Encrypted:',encrypted)

    decrypted = []
    for block in encrypted:
        decrypted.append(aes_decrypt(block,key))
    
    decrypted_inline = []
    for block in decrypted:
        for el in block:
            decrypted_inline.append(el)
    print('Decrypted:',decrypted_inline)

    print(num_arr == decrypted_inline)


if __name__ == '__main__':
    main()